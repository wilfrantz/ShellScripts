#!/usr/bin/env bash


bold=$(tput bold)
normal=$(tput sgr0)

COLOR_GRAY="\033[1;38;5;243m"
COLOR_BLUE="\033[1;34m"
COLOR_GREEN="\033[1;32m"
COLOR_RED="\033[1;31m"
COLOR_PURPLE="\033[1;35m"
COLOR_YELLOW="\033[1;33m"
COLOR_NONE="\033[0m"
COLOR_GRAY="\033[1;38;5;243m"

repos=/Users/dede/Code/Github/

title() {
	echo -e "\n${COLOR_PURPLE}$1${COLOR_NONE}"
	echo -e "${COLOR_GRAY}==============================${COLOR_NONE}\n"
}

success=0
warning=0
fail=0


echo ""
for repo in "$repos"*; do

	repo_name=$(exa -d "$repo" | cut -d'/' -f6)

	if [ "$(git -C "$repo" status 2> /dev/null | grep -i "nothing to commit")" ];
	then
		printf "${COLOR_GREEN}Fetching${COLOR_NONE} %s ...\n" "$repo"
		git -C "$repo" fetch 2> /dev/null
		if [ $? -eq 0 ]; then
			printf "${COLOR_GREEN}Pulling${COLOR_NONE} %s" "$repo_name"
			#exa --long --tree --level=1 "$repo"
			git &> /dev/null -C "$repo" pull --rebase;  echo -e "${COLOR_GREEN} [Ok]"
			sleep 1
			success=$((success+1))
		else
			printf "${COLOR_RED}Error:${COLOR_NONE} Couldn't fetch %s\n" "$repo_name"
			fail=$((fail+1))
			continue
		fi
	else
		printf "${COLOR_YELLOW}Warning:${COLOR_NONE} ${bold}%s${normal} has uncommitted changes.\n" "$repo_name"
		warning=$((warning+1))
	fi
done


repo_count=$(ls -l "$repos" | wc -l)
printf "\nSummary: ${COLOR_BLUE}Repos${COLOR_NONE} %d ${COLOR_BLUE}Updates${COLOR_NONE} %d ${COLOR_BLUE}failures${COLOR_NONE} %d ${COLOR_BLUE}warnings${COLOR_NONE} %d\n" "$repo_count" "$success" "$fail" "$warning"
exit

